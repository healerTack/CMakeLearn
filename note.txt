cmake使用MinGW进行编译：cmake -B build -G "MinGW Makefiles"
生成二进制可执行文件：cmake --build build

利用 cmake -P *.cmake来执行.cmake文件进而学习cmake(第二章开始)
Cmake Language 的执行从根文件开始
！！cmake语法：
1. message

2. 变量:(变量名含有空格时，使用\ 反义) list&set
    (1)CMake提供
    (2)自定义：
        set(<variable> <value>...[PARENT_SCOPE])
        !!! 一个变量可以设置多个值，存储时用";"分割，但是显示时只进行连接处理
        unset(<variable>): 用来取消定义

        .list(APPEND <list> [<element>...]) 列表添加元素
            在list列表中加入元素element

        .list(REMOVE_ITEM <list> <value>[value...]) 列表删除元素
            在list列表中删除元素value

        .list(LENGTH <list> <output variable>) 获取列表元素个数
            获取list的长度存储到out-var中

        .list(FIND <list> <value> <out-var>) 在列表中查找元素返回索引
            查找list列表中元素value是否存在，返回索引存储到out-var中

        .list(INSERT <list> <index> [<element>...]) 在index位置插入
            在list列表的index位置插入元素element

        .list(REVERSE <list>) 反转list
        
        .list(SORT <list>[...]) 排序list

3. 条件控制： 取反NOT  小于LESS  等于EQUAL  
    (1) if（判断）  一定要结尾配对endif()  数字和字符串比大小（都是按照字符串存储）
    (2) for循环   一定要结尾配对endforeach()
        .foreach(<loop_var> RANGE <max>)
         <commands>
         endforeach()

        .foreach(<loop_var> RANGE <min> <max>[<step>]) 从min到max按照step步幅循环
         <commands>
         endforeach()

        .foreach(<loop_var> IN [LISTS <lists>][ITEMS <items>]) 键值对以列表元素为循环
         <commands>
         endforeach() 

4. 函数：function定义
    function(<name>[<argument>...])
    <commands>
    endfunction()

5. 作用域： scope
    (1)Function scope函数作用域
    (2)Directory scope 当从add_subdirectory()命令执行嵌套目录中的CMakeLists.txt列表文件时，
    注意父CMakeLists.txt其中的变量可以被子CMakeLists.txt使用
        
6. 宏：macro定义 ！！！！只要能读懂就行  (相当于代码全部复制到调用宏的位置)
    macro(<name> [<argument>...])
    <commands>
    endmacro()


----------------------------------------------------------------

项目构建：
    1. 最基础：在add_executable()中添加所有.cpp文件

    2. 调用子目录中的cmake脚本：
        在.cmake脚本中设置变量，管理文件
    
    3. CMakeLists嵌套使用：
        (1) 常用命令：
            target_include_directories  头文件目录的声明
            target_link_libraries  连接库文件
            add_subdirectory  添加子目录
            add_library  生成库文件（默认STATIC library）

        (2) 一般步骤：
            在头文件目录中创建库文件add_library()
            之后连接库文件并声明头文件目录
                add_subdirectory()
                target_link_libraries()
                target_include_directories()
    
    4. Object Libraries
        (1) 命令：add_library OBJECT
            一个特殊的库类型，将目标文件编译成一个库，但不会生成最终的连接文件。
            可以在后续的add_library()或add_executable()命令中，将Object Library作为源文件进行链接，
            从而生成最终的可执行文件或库文件
        
        (2) 一般步骤：
            创建库文件add_library()时选取OBJECT参数
            在该文件中调用target_include_directories()
            之后连接库文件并声明头文件目录
                add_subdirectory()
                target_link_libraries()